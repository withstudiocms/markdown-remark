import type { AstroIntegration } from 'astro';
import { addVirtualImports, createResolver } from 'astro-integration-kit';
import { z } from 'astro/zod';
import { shared } from './shared.js';

const MarkdownRemarkOptionsSchema = z
	.object({
		/**
		 * Inject CSS for Rehype autolink headings styles.
		 */
		injectCSS: z.boolean().optional().default(true),

		/**
		 * Options for the Markdown processor.
		 */
		markdown: z
			.object({
				/**
				 * Configures the callouts theme.
				 */
				callouts: z
					.object({
						/**
						 * The theme to use for callouts.
						 */
						theme: z
							.union([z.literal('github'), z.literal('obsidian'), z.literal('vitepress')])
							.optional()
							.default('obsidian'),
					})
					.optional()
					.default({}),
			})
			.optional()
			.default({}),
	})
	.optional()
	.default({});

export type MarkdownRemarkOptions = typeof MarkdownRemarkOptionsSchema._input;

/**
 * Integrates the Markdown Remark processor into Astro available as `studiocms:markdown-remark`.
 *
 * @param {MarkdownRemarkOptions} opts Options for the Markdown Remark processor.
 * @returns Astro integration.
 */
export function markdownRemark(opts?: MarkdownRemarkOptions): AstroIntegration {
	const { injectCSS, markdown } = MarkdownRemarkOptionsSchema.parse(opts);
	const { resolve } = createResolver(import.meta.url);

	const resolvedCalloutTheme = resolve(
		`../../assets/callout-themes/${markdown.callouts.theme}.css`
	);

	return {
		name: '@studiocms/markdown-remark',
		hooks: {
			'astro:config:setup'(params) {
				addVirtualImports(params, {
					name: '@studiocms/markdown-remark',
					imports: {
						'studiocms:markdown-remark': `export * from '${resolve('./markdown.js')}';`,
						'studiocms:markdown-remark/css': `
							import '${resolve('../../assets/headings.css')}';
							import '${resolvedCalloutTheme}';
						`,
					},
				});

				if (injectCSS) {
					params.injectScript('page-ssr', 'import "studiocms:markdown-remark/css";');
				}
			},
			'astro:config:done'({ injectTypes, config }) {
				shared.markdownConfig = config.markdown;
				injectTypes({
					filename: 'render.d.ts',
					content: `// This file is generated by @studiocms/markdown-remark
					
					declare module 'studiocms:markdown-remark' {
						export const render: typeof import('${resolve('./markdown.js')}').render;
						export const Markdown: typeof import('${resolve('./markdown.js')}').Markdown;
						export type Props = import('${resolve('./markdown.js')}').Props;
						export type RenderResponse = import('${resolve('./markdown.js')}').RenderResponse;
					}
                    `,
				});
			},
		},
	};
}
