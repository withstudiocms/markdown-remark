import type { AstroIntegration } from 'astro';
import { addVirtualImports, createResolver } from 'astro-integration-kit';
import {
	type StudioCMSMarkdownRemarkOptions,
	StudioCMSMarkdownRemarkOptionsSchema,
} from './schema.js';
import { shared } from './shared.js';

export type { StudioCMSMarkdownRemarkOptions } from './schema.js';

/**
 * Integrates the Markdown Remark processor into Astro available as `studiocms:markdown-remark`.
 *
 * @param {StudioCMSMarkdownRemarkOptions} opts Options for the Markdown Remark processor.
 * @returns Astro integration.
 */
export function markdownRemark(opts?: StudioCMSMarkdownRemarkOptions): AstroIntegration {
	// Parse the options
	const { injectCSS, components, markdownExtended } =
		StudioCMSMarkdownRemarkOptionsSchema.parse(opts);

	// Create a resolver for the current file
	const { resolve } = createResolver(import.meta.url);

	// Resolve the callout theme based on the user's configuration
	const resolvedCalloutTheme = resolve(
		`./styles/callout-themes/${markdownExtended.callouts.theme}.css`
	);

	return {
		name: '@studiocms/markdown-remark',
		hooks: {
			'astro:config:setup'(params) {
				// Create a resolver for the Astro project root
				const { resolve: astroRootResolve } = createResolver(params.config.root.pathname);

				// Add virtual imports for the Markdown Remark processor
				addVirtualImports(params, {
					name: '@studiocms/markdown-remark',
					imports: {
						// The main Markdown Remark processor
						'studiocms:markdown-remark': `export * from '${resolve('./markdown.js')}';`,
						// Styles for the Markdown Remark processor
						'studiocms:markdown-remark/css': `
							import '${resolve('./styles/headings.css')}';
							${markdownExtended.callouts.enabled ? `import '${resolvedCalloutTheme}';` : ''}
						`,
						// User defined components for the Markdown processor
						'studiocms:markdown-remark/user-components': `
							export const componentKeys = ${JSON.stringify(Object.keys(components).map((name) => name.toLowerCase()))};

							${Object.entries(components)
								.map(
									([name, path]) =>
										`export { default as ${name.toLowerCase()} } from '${astroRootResolve(path)}';`
								)
								.join('\n')}
						`,
					},
				});

				// Inject the CSS for the Markdown processor if enabled
				if (injectCSS) {
					params.injectScript('page-ssr', 'import "studiocms:markdown-remark/css";');
				}
			},
			'astro:config:done'({ injectTypes, config }) {
				// Create a resolver for the Astro project root
				const { resolve: astroRootResolve } = createResolver(config.root.pathname);

				// Inject the Markdown configuration into the shared state
				shared.markdownConfig = config.markdown;
				shared.studiocms = markdownExtended;

				// Inject types for the Markdown Remark processor
				injectTypes({
					filename: 'render.d.ts',
					content: `// This file is generated by @studiocms/markdown-remark
					
					declare module 'studiocms:markdown-remark' {
						export const render: typeof import('${resolve('./markdown.js')}').render;
						export const Markdown: typeof import('${resolve('./markdown.js')}').Markdown;
						export type Props = import('${resolve('./markdown.js')}').Props;
						export type RenderResponse = import('${resolve('./markdown.js')}').RenderResponse;
					}

					declare module 'studiocms:markdown-remark/user-components' {
						export const componentKeys: string[];

						${Object.entries(components)
							.map(
								([name, path]) =>
									`export const ${name.toLowerCase()}: typeof import('${astroRootResolve(path)}').default;`
							)
							.join('\n')}
					}
                    `,
				});
			},
		},
	};
}

export default markdownRemark;
